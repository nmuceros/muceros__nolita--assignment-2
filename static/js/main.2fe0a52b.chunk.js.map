{"version":3,"sources":["images/delete.svg","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","entered_todo","todos","setTodos","todo","timestamp","useState","isChecked","setIsChecked","getCurrentDateTime","currentDate","Date","formattedDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","parse","className","onClick","filter","item","id","alt","src","deleteIcon","completed","style","display","alignItems","marginRight","type","checked","onChange","e","completeTodo","map","sort","firstItem","secondItem","flex","cursor","float","verticalAlign","width","height","overflow","TodoList","setTodo","errorMessage","setErrorMessage","inputRef","useRef","useEffect","current","focus","getStyle","snapshot","isDropAnimating","dropAnimation","moveTo","curve","duration","translate","x","y","transform","transition","onSubmit","preventDefault","Math","round","random","toString","placeholder","target","value","console","log","ref","onDragEnd","result","destination","startIndex","endIndex","Array","from","splice","removed","reOrder","source","index","droppableId","provided","innerRef","draggableId","draggableProps","dragHandleProps","App","name","content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fe0a52b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/delete.7838b275.svg\";","import React, { useState } from \"react\";\nimport deleteIcon from '../images/delete.svg';\n\nconst Todo = ({entered_todo, todos, setTodos, todo, timestamp }) => {\n    \n    const [isChecked, setIsChecked] = useState(false);\n\n    const getCurrentDateTime = () => {\n        let currentDate = new Date();\n        /* The output will be in this format YYYY-MM-DD H:MM:SS */\n        let formattedDate = currentDate.getFullYear() + '-' + (currentDate.getMonth()+1) + '-' + currentDate.getDate() +' '+ currentDate.getHours()+':'+ currentDate.getMinutes()+':'+ currentDate.getSeconds();\n        /* converts the date and time into milseconds */\n        return Date.parse(formattedDate);\n    }\n\n\n    const completeTodo_Handler = e => {\n        setIsChecked(!isChecked)\n        const completeTodo = todos.map( item => {\n                if(item.id === todo.id) {\n                    return {\n                        ...item, completed: !item.completed, timestamp: getCurrentDateTime()\n                    };\n                }\n                return item;\n         });\n        setTodos(completeTodo.sort((firstItem, secondItem) => { \n            return firstItem.completed - secondItem.completed || firstItem.timestamp - secondItem.timestamp\n          }\n        ));\n        \n    };\n\n\n    const deleteTodo_Handler = () => {\n        setTodos(todos.filter( (item) => item.id !== todo.id ));\n    };\n\n\n    return (\n        <div className=\"todo-item-container\">\n         \n            <div className=\"delete-container\"  >\n                <a>\n                    <img className=\"delete-icon\" onClick={deleteTodo_Handler} alt=\"\" src={deleteIcon} />\n                </a>\n             </div>\n\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"todo-item\"}`} >\n                <label className=\"checkbox-container\"\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        marginRight: \"12px\"\n                    }}\n                >\n                    <input type=\"checkbox\" \n                            className=\"todo-checkbox\"\n                            checked={isChecked}\n                            onChange={completeTodo_Handler}\n                            style={{\n                                    flex: \"none\",\n                                    cursor: \"pointer\", \n                                    float: \"left\", \n                                    marginRight: \"12px\", \n                                    verticalAlign: \"middle\",\n                                    width: \"1.5vw\",\n                                    height: \"1.5vw\"\n                            }} \n                    />\n                    <span\n                        style={{overflow:\"hidden\"}}\n                    >{entered_todo}</span>\n                </label>\n            </li>\n        </div>\n    );\n};\n\nexport default Todo;","import React, { useState, useEffect, useRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Todo from \"./Todo\";\nimport \"../../src/App.css\"\n\nconst TodoList = () => {\n    const [todo, setTodo] = useState(''); \n    const [todos, setTodos] = useState([]);\n    const [errorMessage, setErrorMessage] = useState('');\n    const inputRef = useRef(null);\n    const errMessageText = \"Must enter something to be added in the list!\"\n\n    useEffect(() => {\n        inputRef.current.focus();\n    }, [])\n\n    const changeTodo_Handler = (e) => {\n        setTodo(e.target.value);\n        console.log(e.target.value)\n        setErrorMessage(!errorMessage)\n    };\n\n    const submitTodo_Handler = (e) => {\n        let timestamp = new Date();\n        e.preventDefault(); /* prevents state to return to its default state */\n\n        if(!todo) {\n            setErrorMessage(errMessageText);\n        }\n        else {\n            setTodos([...todos, {\n                entered_todo: todo, \n                completed: false, \n                id: Math.round(Math.random() * 1000).toString()\n            }].sort( (firstItem, secondItem) => firstItem.completed - secondItem.completed));\n            setTodo(\"\"); /* set the state to its default value */\n        }\n    }\n\n    const reOrder = (todos, startIndex, endIndex) => {\n        const result = Array.from(todos);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n        return result;\n    }\n\n\n    const onDragEnd_Handler = result => {\n        if (result.destination !== null) {\n            setTodos(reOrder(todos, result.source.index, result.destination.index));\n        } \n    }\n    \n    function getStyle(style, snapshot) {\n        if (!snapshot.isDropAnimating) {\n          return style;\n        }\n        const { moveTo, curve, duration } = snapshot.dropAnimation;\n        // move to the right spot\n        const translate = `translate(${moveTo.x}px, ${moveTo.y}px)`;      \n        // add a bit of turn for fun\n        const rotate = 'rotate(0.5turn)';      \n        // patching the existing style\n        return {\n          ...style,\n          transform: `${translate} ${rotate}`,\n          // slowing down the drop because we can\n          transition: `all ${curve} ${duration}s`,\n        };\n      }           \n\n    return (\n        <main className=\"todo-list-container\">\n            <div className=\"form-container\">\n                <form onSubmit={ submitTodo_Handler }>\n                    {errorMessage && <p className=\"error\">{errorMessage}</p>}\n                    <input \n                        className=\"input-todo\" \n                        type=\"text\" \n                        placeholder=\"Input to-do here then hit enter...\" \n                        onChange={ changeTodo_Handler} \n                        ref={inputRef}\n                        value = { todo } \n                        // style={{ fontSize: \"1.5vw\"}}\n                    />\n                </form>\n            </div>\n\n            <div className=\"todo-container\">\n                <DragDropContext onDragEnd={onDragEnd_Handler}>   \n                    <Droppable droppableId='12345678'>\n                        {(provided, snapshot) => (\n                            <div ref={provided.innerRef}>\n                                <ul className=\"todo-list\">\n                                    {todos.map((todo, index) => (\n                                        <Draggable\n                                            className=\"draggable\"\n                                            draggableId={todo.id}\n                                            key={todo.id}\n                                            index={index}\n                                        >\n                                            {(provided, snapshot) => (\n                                                <div key={todo.id} \n                                                    key={todo.id}\n                                                    ref={provided.innerRef}\n                                                    {...provided.draggableProps}\n                                                    {...provided.dragHandleProps}\n                                                    style={getStyle(provided.draggableProps.style, snapshot)}\n                                                >\n                                                <Todo \n                                                    id={todo.id} \n                                                    entered_todo={todo.entered_todo}\n                                                    todos={todos}\n                                                    setTodos={setTodos}\n                                                    todo={todo}\n                                                    \n                                                />\n                                                </div>\n                                            )}   \n                                        </Draggable>\n                                    ))}\n                                    {provided.placeholder}\n                                </ul>\n                            </div>\n                                \n                        )}\n                    </Droppable>                            \n                </DragDropContext>                                        \n            </div>    \n        </main>\n    );\n};\n\nexport default TodoList;","import React, { useState } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"main\">\n        <head>\n          <meta name=\"viewport\" content=\"width-device-width, initial-scale=1.0\" />\n        </head>\n        <h2>~ My To-Do List ~</h2>\n        <TodoList />\n  </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}